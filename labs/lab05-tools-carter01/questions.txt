- Memory debugging - Did you find any memory errors? What kind? How do you think you might fix them? Include a portion (maybe 10-20 lines) of the output from your tool that supports your answers.

16 bytes in 1 blocks are definitely lost in loss record 1 of 2
==79945==    at 0x4C2A4C3: operator new(unsigned long) (vg_replace_malloc.c:344)
==79945==    by 0x4014E8: pathFind(int const&, int const&, int const&, int const&) (main.cpp:109)
==79945==    by 0x401F01: main (main.cpp:250)
==79945== 
==79945== 61,504 bytes in 3,844 blocks are definitely lost in loss record 2 of 2
==79945==    at 0x4C2A4C3: operator new(unsigned long) (vg_replace_malloc.c:344)
==79945==    by 0x4018AF: pathFind(int const&, int const&, int const&, int const&) (main.cpp:162)
==79945==    by 0x401F01: main (main.cpp:250)
==79945== 
==79945== LEAK SUMMARY:
==79945==    definitely lost: 61,520 bytes in 3,845 blocks
==79945==    indirectly lost: 0 bytes in 0 blocks
==79945==      possibly lost: 0 bytes in 0 blocks
==79945==    still reachable: 0 bytes in 0 blocks
==79945==         suppressed: 0 bytes in 0 blocks


There seem to be two places in the code where memory is being allocated with new but no deallocated with delete.
One is n0=new node(xStart, yStart, 0, 0) on line 109.
The other is m0=new node( xdx, ydy, n0->getLevel(),n0->getPriority()) on line 162. 

I would follow where these are being allocated and figure out where to deallocate them with delete at the end of the program.




- Performance profiling - Based on the profiling information you saw, what do you think is taking the most time? Include a portion (maybe 10-20 lines) of the output from your tool that supports your answers.
Each sample counts as 0.01 seconds.
 no time accumulated

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ts/call  Ts/call  name    
  0.00      0.00     0.00   139449     0.00     0.00  void std::__push_heap<__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, node, std::less<node> >(__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, long, node, std::less<node>)
  0.00      0.00     0.00    69443     0.00     0.00  void std::__adjust_heap<__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, node, std::less<node> >(__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, long, node, std::less<node>)
  0.00      0.00     0.00       18     0.00     0.00  void std::vector<node, std::allocator<node> >::_M_emplace_back_aux<node const&>(node const&)
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZltRK4nodeS1_

  Since the percent time field here lists 0.00 no matter what, it's sorta hard to tell what is taking the most time. What I can see however,
  is that pushing nodes onto the heap is seems to be the most called function here. So, looking at whatever is doing that the most often and optimizing it 
  would probably make the program more efficient.


		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) no time propagated

index % time    self  children    called     name
                0.00    0.00   69443/139449      void std::__adjust_heap<__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, node, std::less<node> >(__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, long, node, std::less<node>) [9]
                0.00    0.00   70006/139449      pathFind(int const&, int const&, int const&, int const&) [12]
[8]      0.0    0.00    0.00  139449         void std::__push_heap<__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, node, std::less<node> >(__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, long, node, std::less<node>) [8]
-----------------------------------------------
                0.00    0.00   69443/69443       pathFind(int const&, int const&, int const&, int const&) [12]
[9]      0.0    0.00    0.00   69443         void std::__adjust_heap<__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, node, std::less<node> >(__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, long, node, std::less<node>) [9]
                0.00    0.00   69443/139449      void std::__push_heap<__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, node, std::less<node> >(__gnu_cxx::__normal_iterator<node*, std::vector<node, std::allocator<node> > >, long, long, node, std::less<node>) [8]
-----------------------------------------------
                0.00    0.00      18/18          pathFind(int const&, int const&, int const&, int const&) [12]
[10]     0.0    0.00    0.00      18         void std::vector<node, std::allocator<node> >::_M_emplace_back_aux<node const&>(node const&) [10]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [19]
[11]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZltRK4nodeS1_ [11]
-----------------------------------------------

This table ocne again backs up my claim that pushing stuff onto the heap takes up the most time because the table is sorted. The most time expensive 
functions are at the top, and the least are at the bottom.

Perhaps using a data structure other than a vector would make this quicker. Or perhaps writing a new, more efficient vector class for what 
we are trying to do would make it more efficient.